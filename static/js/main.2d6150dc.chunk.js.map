{"version":3,"sources":["logo.svg","App.js","index.js","registerServiceWorker.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","react_responsive_default","minWidth","Grid","Row","Col","md","App_ItIsMe","App_Design","Component","ItIsMe","Design","src","logo","ReactDOM","render","src_App_0","document","getElementById","navigator","window","addEventListener","swUrl","concat","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8RCSlCC,0LAGF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAYI,SAAU,MAClBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKJ,UAAU,aACXH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,GAAI,GACLT,EAAAC,EAAAC,cAACQ,EAAD,OAEJV,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,GAAI,GACLT,EAAAC,EAAAC,cAACS,EAAD,kBAZRC,cA0BZC,EAAS,kBACPb,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACZH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,8CAGNY,EAAS,kBACPd,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WACZH,EAAAC,EAAAC,cAAA,OAAKa,IAAKC,QAGPjB,UC1CfkB,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SCKF,kBAAmBC,WAC9DC,OAAOC,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAAC,OAAMC,MAAN,sBACXL,UAAUM,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfd,UAAUM,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA","file":"static/js/main.2d6150dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport {Button,Grid, Row, Col} from 'react-bootstrap'; // Button from Bootstrap\r\nimport MediaQuery from 'react-responsive';\r\n\r\n\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n          <MediaQuery minWidth={1224} >\r\n              <Grid>\r\n                  <Row className=\"show-grid\">\r\n                      <Col md={8} >\r\n                          <ItIsMe/>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                          <Design/>\r\n                      </Col>\r\n                  </Row>\r\n              </Grid>\r\n\r\n          </MediaQuery>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//Header\r\n\r\n\r\n//Introduction\r\nconst ItIsMe = () =>\r\n        <div className={\"myName\"}>\r\n            <h1>RIORDAN</h1>\r\n            <h1>DERVIN</h1>\r\n            <h1>ALFREDO</h1>\r\n            <h3>freelance full-stack developer</h3>\r\n        </div>\r\n\r\nconst Design = () =>\r\n        <div className={\"picture\"}>\r\n            <img src={logo}/>\r\n        </div>\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nif(module.hot){\r\n    module.hot.accept();\r\n}\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}